;=====================================================================
; product specific variables WinSCP
;
; J. Boettge <boettge@mpi-halle.mpg.de>  2021-12-27 06:58:20 +0100
;=====================================================================

include_insert "%ScriptPath%\variables.opsiinc"

Set $MAP$ 				= getProductMap
Set $FullProductId$   	= getValue("id", $MAP$)
Set $ProductName$     	= getValue("name", $MAP$)
Set $Version$         	= getValue("ProductVersion", $MAP$)
Set $ActionRequest$		= getValue("actionrequest", $MAP$)
Set $SystemType$      	= GetSystemType
Set $OS$                = GetOS
;Set $NTVersion$   		= GetMsVersionInfo
Set $Stage$				= lower("{{STAGE}}")

requiredWinstVersion >= "4.12.0"

;-----------------------------------------------------------
;*** helper functions
;-----------------------------------------------------------
importlib "helpers.opsifunc"

;-----------------------------------------------------------
;*** basic requirements
;-----------------------------------------------------------
if not($OS$ = "Windows_NT")
       logError "Installation aborted: wrong OS  â€” This package only supports Windows"
       isFatalError
endif

Set $NTVersion$ = GetMsVersionInfo
if CompareDotSeparatedNumbers($NTVersion$, "<", "6.1")
	LogError "OS is not Windows 7 or above"
	isFatalError
endif

if not ($SystemType$ = "64 Bit System")
	; LogError "OS is not a 64 Bit System"
	; isFatalError

	LogWarning "OS is not a 64 Bit System; 32 Bit is not explicitly supported"
endif

;-----------------------------------------------------------
;*** get LogLevel from property
;-----------------------------------------------------------
Set $LogLevelDefault$ = GetProductProperty("log_level","default")

;-----------------------------------------------------------
;*** detect testing package:
;-----------------------------------------------------------
if (strPos($FullProductId$, "0_") = "0") and (strPos($FullProductId$, "test_") = "0") and (strPos($Stage$,"test") = "0")
	; not a testing package
	comment "INFO: RELEASE package detected"
	set $ProductId$  	= $FullProductId$ 
	set $Testing$ 		= "false"
	if ($LogLevelDefault$ = "default")
		set $LogLevelDefault$  	= "{{DEFAULT_RELEASE_LOGLEVEL}}"
	endif
else
	; this is a testing package
	comment "INFO: TESTING package detected"
	if (strPos($FullProductId$, "0_") = "0") and (strPos($FullProductId$, "test_") = "0")
		set $ProductId$	= $FullProductId$
	else
		set $ProductId$	= strPart($FullProductId$, calculate(strPos($FullProductId$,"_") + "+1"), strLength($FullProductId$))
	endif
	set $Testing$ 		= "true"
	if ($LogLevelDefault$ = "default")
		set $LogLevelDefault$  	= "{{DEFAULT_TESTING_LOGLEVEL}}"
	endif
endif
setlogLevel = $LogLevelDefault$

;-----------------------------------------------------------
;*** detect O4I/DFN package:
;-----------------------------------------------------------
if (strPos($FullProductId$, "o4i_") = "0") AND (strPos($FullProductId$, "dfn_") = "0")
	set $isO4I$ = "false"
	set $StrippedProductId$ = $ProductId$
else
	set $isO4I$ = "true"
	set $StrippedProductId$ = strPart($ProductId$,"5",strLength($ProductId$))
endif

;-----------------------------------------------------------
;*** Images
;-----------------------------------------------------------
if (FileExists("%ScriptPath%\..\lib\icons\%installingProdName%.png"))
	set $Img_Install$               = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	set $Img_Install_Custom$        = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Uninstall$             = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Uninstall_Custom$      = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Prepare$               = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Plugins$               = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Config$                = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
	Set $Img_Update$                = "%ScriptPath%\..\lib\icons\%installingProdName%.png"
else
	if ($isO4I$ = "true")
		set $Img_Install$		= "%ScriptPath%\images\" + $StrippedProductId$ + "_install_o4i.png"
	else
		set $Img_Install$		= "%ScriptPath%\images\" + $StrippedProductId$ + "_install.png"
	endif
	set $Img_Install_Custom$	= "%ScriptPath%\images\" + $StrippedProductId$ + "_install_custom.png"
	Set $Img_Uninstall$			= "%ScriptPath%\images\" + $StrippedProductId$ + "_uninstall.png"
	Set $Img_Uninstall_Custom$	= "%ScriptPath%\images\" + $StrippedProductId$ + "_uninstall_custom.png"
	Set $Img_Prepare$			= "%ScriptPath%\images\" + $StrippedProductId$ + "_prepare.png"
	Set $Img_Plugins$			= "%ScriptPath%\images\" + $StrippedProductId$ + "_plugins.png"
	Set $Img_Config$			= "%ScriptPath%\images\" + $StrippedProductId$ + "_config.png"
	Set $Img_Update$			= "%ScriptPath%\images\" + $StrippedProductId$ + "_update.png"
endif

comment "preparing..."
ShowBitmap $Img_Prepare$ $ProductName$

;-----------------------------------------------------------
;*** software architecture; valid values: "32 bit", "64 bit", "sysnative"
;-----------------------------------------------------------
;*** simplify SystemType
Switch $SystemType$
	case "64 Bit System"
		Set $SystemType$ = "x64"
	endCase
	case "x86 System"
		Set $SystemType$ = "x32"
	endCase
	defaultCase
		Set $SystemType$ = ""
	endCase
endSwitch

{{#ifdef_property_arch}}
Set $sw_arch$ = GetProductProperty("install_architecture","sysnative")
{{/ifdef_property_arch}}
{{^ifdef_property_arch}}
Set $sw_arch$ = "32 bit"
{{/ifdef_property_arch}}

Set $sw_arch$ = takeString(0, splitString($sw_arch$, " "))
; Set $sw_arch$		  = "32"

if ( $sw_arch$ = "sysnative" )
	if ($SystemType$ = "x64")
		Set $sw_arch$ = "64"
	else
		Set $sw_arch$ = "32"
	endif
endif

if ($sw_arch$ = "64")
	; 64 bit software
	set $InstallBase$ = "%ProgramFiles64Dir%"
else
	; 32 bit software
	;set $InstallBase$ = EnvVar("ProgramFiles(x86)")
	set $InstallBase$ = "%ProgramFiles32Dir%"
endif

if ($SystemType$="x32") and ($sw_arch$="64")
	LogError "Cannot install 64 bit version of " + $ProductName$ + " on a 32 bit operating system!"
	isFatalError
endif

Set $RegPathUninstall64$ 	= "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
Set $RegPathUninstall32$ 	= "HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"

;-----------------------------------------------------------
;*** property: language - "de_DE, "en_US"
; application language defined via environment variable LANG
; ...not yet implemented
;-----------------------------------------------------------
; Set $sw_lang$ 			= GetProductProperty("default_language","en_US")

;-----------------------------------------------------------
;*** property: create desktop/startmenu/quickstart link?
;-----------------------------------------------------------
Set $pr_DesktopLink$ 		= GetProductProperty("link_desktop","False")

;-----------------------------------------------------------
;*** properties: post install/uninstall
;-----------------------------------------------------------
set $CustomPostInstall$ 	= getProductProperty("custom_post_install","none")
set $CustomPostUninstall$ 	= getProductProperty("custom_post_uninstall","none")

;-----------------------------------------------------------
;*** product_variables.opsiinc
set $PSDETAIL$ 			= "%ScriptPath%\bin\psdetail.exe"
if (CompareDotSeparatedNumbers($NTVersion$, ">=", "10.0"))
	set $PSDETAIL$ 		= "%ScriptPath%\bin\psdetail4.exe"
endif

set $GETREALNAME$		= "%ScriptPath%\bin\GetRealName.exe"

; set $SEVENZIP$			= "%ScriptPath%\bin\7za.exe"

; changed to "true" on running sub_checkinstance_init:
set $bCheckInstance$ 	= "false"
; changed to "true" on init if $PSDETAIL$ exists:
set $bPSDetail$			= "false"


;-----------------------------------------------------------
;*** misc settings
;-----------------------------------------------------------
set $Kill_Running$            = GetProductProperty("kill_running", "False")
set $pr_silent_option$        = GetProductProperty("silent_option","silent")
set $pr_install_translations$ = GetProductProperty("install_translations","true")
set $pr_updates_period$       = GetProductProperty("config_updates_period","never")
set $pr_interface_style$      = GetProductProperty("config_interface_style","do not change")
set $pr_interface_theme$      = GetProductProperty("config_interface_theme","do not change")
set $pr_user_settings$        = GetProductProperty("configure_user_settings","false")

;-----------------------------------------------------------
;*** exit code checkers
;-----------------------------------------------------------
Set $InstallerType$   	= "{{O_USE_INSTALLER}}"
include_append "%ScriptPath%\exitcode_inno.opsiinc"
include_append "%ScriptPath%\exitcode_msi.opsiinc"
;include_append "%ScriptPath%\exitcode_nsis.opsiinc"

;-----------------------------------------------------------
;*** logs
;-----------------------------------------------------------
Set $LogDir$		= "%opsiLogDir%"
Set $Inst_Log$		= $LogDir$ + "\"+$ProductId$+"_install.log"
Set $Uninst_Log$	= $LogDir$ + "\"+$ProductId$+"_uninstall.log"


;-----------------------------------------------------------
;*** specific settings
;-----------------------------------------------------------
; packages (for example):
; 		WinSCP-5.13.9-Setup.exe

;Set $InstallDir$      	= $InstallBase$ + "\" + stringReplace($ProductName$," ", "") + "\"
Set $InstallDir$      	= $InstallBase$ + "\" + $ProductName$ + "\"
;Set $InstallDir$      	= $InstallBase$ + "\" + $StrippedProductId$ + "\"

Set $Tasks$=""
Set $Components$="main,pageant,puttygen"


Switch $pr_updates_period$
	Case "daily"
		Set $cfg_UpdatesPeriod$ = "1"
	EndCase
	Case "weekly"
		Set $cfg_UpdatesPeriod$ = "7"
	EndCase
	Case "monthly"
		Set $cfg_UpdatesPeriod$ = "30"
	EndCase
	DefaultCase
		Set $cfg_UpdatesPeriod$ = "0"
	EndCase
EndSwitch

Switch $pr_interface_style$
	Case "commander"
		Set $cfg_InterfaceStyle$ = "0"
	EndCase
	Case "explorer"
		Set $cfg_InterfaceStyle$ = "1"
	EndCase
	DefaultCase
		; do not change
		Set $cfg_InterfaceStyle$ = "false"
	EndCase
EndSwitch

Switch $pr_interface_theme$
	Case "auto"
		Set $cfg_InterfaceTheme$ = "2"
	EndCase
	Case "light"
		Set $cfg_InterfaceTheme$ = "1"
	EndCase
	Case "dark"
		Set $cfg_InterfaceTheme$ = "0"
	EndCase
	DefaultCase
		; do not change
		Set $cfg_InterfaceTheme$ = "false"
	EndCase
EndSwitch

if $pr_install_translations$ = "true"
	Set $MinimumSpace$    	= "110 MB"
	Set $Components$        = $Components$ + ",transl"
else
	Set $MinimumSpace$    	= "50 MB"
endif

;Set $CheckBin$       	= $StrippedProductId$ + ".exe"
Set $CheckBin$       	= "winscp.exe"
Set $PathToExe$			= $InstallDir$ + $CheckBin$

;-------------------------------------------------------
; filter for opsiServiceCall productOnClient_getObjects:
;-------------------------------------------------------
set $ProductFilter$	= "*" + $StrippedProductId$
set $ProductVersionFilter$ = "*"


;-------------------------------------------------------
; uninstall search patterns
;-------------------------------------------------------
Set $SearchPattern$ 	= $ProductName$
Set $Uninst_ID_std$	   	= $ProductName$
Set $Uninst_Prg$       	= "unins000.exe"
Set $Uninstaller$	   	= $InstallDir$ + $Uninst_Prg$
; ...or UninstallString aus Registry

;---------------------------------
;*** set verbosity of (un)installer
;---------------------------------
Switch $pr_silent_option$
	Case "silent"
		;*** be SILENT
		Set $Verb_INNO$ = "/SILENT"
		Set $Verb_MSI$  = "/qb-!"
	EndCase
	Case "very silent"
		;*** be VERY SILENT
		Set $Verb_INNO$ = "/VERYSILENT"
		Set $Verb_MSI$  = "/qn"
	EndCase
	DefaultCase
		;*** What are you talking about? - be  SILENT
		Set $Verb_INNO$ = "/SILENT"
		Set $Verb_MSI$  = "/qb-!"
	EndCase
EndSwitch

Switch $InstallerType$
	Case "INNO"
		Set $Verbosity$ = $Verb_INNO$
	EndCase
	Case "MSI"
		Set $Verbosity$ = $Verb_MSI$
	EndCase
	DefaultCase
		Set $Verbosity$ = ""
	EndCase
EndSwitch

;---------------------------------
;*** specific Installer/Uninstaller options:
;---------------------------------
Switch $InstallerType$
Case "INNO"
	;============= INNO =============
	; Set $Installer$		 = "%ScriptPath%\files\" + $ProductName$ + "-{{O_SOFTWARE_VER}}-x" + $sw_arch$ + ".exe"
	Set $Installer$			 = "%ScriptPath%\files\" + $ProductName$ + "-{{O_SOFTWARE_VER}}-Setup.exe"
	Set $INNO_Setup_Inf$	 = "%ScriptPath%\setup_winscp.inf"
	Set $INNO_Setup_Inf_tmp$ = "%opsiTmpDir%\setup_winscp.inf"
	;Set $INNO_Inst_Opts$     = '/SP- ' + $Verbosity$ + ' /NOCANCEL /NORESTART /CLOSEAPPLICATIONS /SUPPRESSMSGBOXES /LANG=en /DIR="' + $InstallDir$ +'" /GROUP="' + $ProductName$ +'" /LOADINF="' + $INNO_Setup_Inf_tmp$ + '" /LOG="'+ $Inst_Log$ +'"'
	Set $INNO_Inst_Opts$     = '/SP- ' + $Verbosity$ + ' /NOCANCEL /NORESTART /CLOSEAPPLICATIONS /SUPPRESSMSGBOXES /LANG=en /LOADINF="'+ $INNO_Setup_Inf_tmp$ + '" /LOG="'+ $Inst_Log$ +'"'
EndCase	
Case "MSI"
	;============= MSI ==============
	; Set $Installer$		= "%ScriptPath%\files\" + $ProductName$ + "-{{O_SOFTWARE_VER}}-x" + $sw_arch$ + ".msi"
	Set $Installer$			= "%ScriptPath%\files\" + $ProductName$ + "-{{O_SOFTWARE_VER}}.msi"
	Set $MSI_Inst_Opts$ 	= $Verbosity$ + ' /norestart /l+* "' + $Inst_Log$ +'" INSTALLDIR="' + $InstallDir$ + '" REBOOT=ReallySuppress ALLUSERS=1'
	Set $MSI_Inst_Cmd$		= 'msiexec /i "' + $Installer$ +'" ' + $MSI_Inst_Opts$
EndCase
Case "NSIS"
	;=== NSIS === (not used here)
	Set $NSIS_Inst_Opts$  	= "/S  /D=" + $InstallDir$
	isFatalError "FATAL ERROR: Unsupported installer type [" + $InstallerType$ + "]"
EndCase
DefaultCase
	isFatalError "FATAL ERROR: Unknown installer type [" + $InstallerType$ + "]"
EndCase
EndSwitch

if not (FileExists($Installer$))
	LogError "FATAL ERROR: Installer not found [" + $Installer$ + "]"
	isFatalError
endif

;---------------------------------
;*** specific Uninstaller options:
;---------------------------------
;*** INNO
Set $INNO_Uninst_Opts$  = $Verb_INNO$ + ' /NORESTART /LOG="'+ $Uninst_Log$ +'"'

;*** MSI
Set $MSI_Uninst_Opts$  	= $Verb_MSI$ + ' /norestart /l+* "' + $Uninst_Log$ + '" REBOOT=ReallySuppress'
Set $MSI_Uninst_Cmd$ 	= "msiexec /x $ProductKey$ " + $Uninst_Opts$

;*** NSIS
Set $NSIS_Uninst_Opts$	= "/S"
